openapi: 3.0.0
info:
  version: '1.0.0'
  title: 'Product-Order Api Docs'
  license:
    name: MIT
servers:
  - url: 'localhost:2020'
paths:
  /products:
    get:
      summary: 'Sample endpoint: Returns details of all products'
      operationId: getAllProducts
      responses:
        '200':
          description: 'Sample response: Details about all the products'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: 'Sample endpoint: create a product'
      operationId: createProduct
      responses:
        '201':
          description: 'Sample response: Product Created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '405':
          description: Validation Exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'   
  /products/{id}:   
    get:
      summary: 'Sample endpoint: Returns details of a particular product by id'
      operationId: getProductById
      parameters:
        - name: id
          in: path
          description: ID of the product
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '304':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'    
    put:
      summary: 'Sample endpoint: update details of a particular product by id'
      operationId: updateProductById
      parameters:
        - name: id
          in: path
          description: ID of the product
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: 'Sample response: Product Updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid ID Supply
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'  
        '405':
          description: Validation Exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'  
    delete:
      summary: 'Sample endpoint: delete a particular product by id'
      operationId: deleteProduct
      parameters:
        - name: id
          in: path
          description: ID of the product
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: 'Sample response: Product Deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
  /orders:
    get:
      summary: 'Sample endpoint: Returns details of all orders'
      operationId: getAllOrders
      responses:
        '200':
          description: 'Sample response: Details about all the orders'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: 'Sample endpoint: create a order'
      operationId: createOrder
      responses:
        '201':
          description: 'Sample response: Order Created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '405':
          description: Validation Exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'   
  /orders/{ordId}:   
    get:
      summary: 'Sample endpoint: Returns details of a particular order by ordId'
      operationId: getOrderById
      parameters:
        - name: ordId
          in: path
          description: ID of the order
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '304':
          description: Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'    
    put:
      summary: 'Sample endpoint: update details of a particular order by ordId'
      operationId: updateOrderById
      parameters:
        - name: ordId
          in: path
          description: ID of the order
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: 'Sample response: Order Updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID Supply
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'  
        '405':
          description: Validation Exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'  
    delete:
      summary: 'Sample endpoint: delete a particular order by ordId'
      operationId: deleteOrder
      parameters:
        - name: ordId
          in: path
          description: ID of the order
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: 'Sample response: Order Deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /orders/productId/{id}:
    get:
      summary: 'Sample endpoint: Returns orders of a particular product by productId'
      operationId: getOrdersByProductId
      parameters:
        - name: id
          in: path
          description: ID of the Product
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '304':
          description: Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Purchase'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /orders/export:
    get:  
      summary: 'Sample endpoint: Returns pdf of all orders'
      operationId: exportToPDF
      responses:
        '200':
          description: 'Sample response: pdf of all the orders'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'                                      
  /purchases:
    get:
      summary: 'Sample endpoint: Returns details of all purchases'
      operationId: getAllPurchases
      responses:
        '200':
          description: 'Sample response: Details about all the purchases'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Purchase'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: 'Sample endpoint: create a Purchase'
      operationId: createPurchase
      responses:
        '201':
          description: 'Sample response: Purchase Created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Purchase'
        '405':
          description: Validation Exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'   
  /purchases/{purchId}:   
    get:
      summary: 'Sample endpoint: Returns details of a particular purchase by purchId'
      operationId: getPurchaseById
      parameters:
        - name: purchId
          in: path
          description: ID of the purchase
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '304':
          description: Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Purchase'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'    
    put:
      summary: 'Sample endpoint: update details of a particular purchase by purchId'
      operationId: updatePurchase
      parameters:
        - name: purchId
          in: path
          description: ID of the purchase
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: 'Sample response: Purchase Updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Purchase'
        '400':
          description: Invalid ID Supply
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'  
        '405':
          description: Validation Exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'        
    delete:
      summary: 'Sample endpoint: delete a particular purchase by purchId'
      operationId: deletePurchase
      parameters:
        - name: purchId
          in: path
          description: ID of the purchase
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: 'Sample response: Purchase Deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Purchase'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'                                                                                  
components:
  schemas:
    Product:
      type: object
      required:
        - id
        - productName
        - partNo
        - productLabel
      properties:
        id:
          type: integer
          format: int64
        productName:
          type: string
        partNo:
          type: string
        productLabel:
          type: string  
    Order:
      type: object
      required:
        - ordid
        - orderTitle
        - orderName
        - orderdDate
      properties:
        ordid:
          type: integer
          format: int64
        orderTitle:
          type: string
        orderName:
          type: string
        orderdDate:
          type: number
    Purchase:
      type: object
      required:
        - purchId
        - purchDate
      properties:
        purchId:
          type: integer
          format: int64
        purchDate:
          type: number            
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
security:
  - BasicAuth: []